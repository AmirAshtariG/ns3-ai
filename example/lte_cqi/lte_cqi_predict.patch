From c10184686cb1acf9403c15d5b60639e5acdce74f Mon Sep 17 00:00:00 2001
From: Hao Yin <haoyin@uw.edu>
Date: Sun, 29 Dec 2019 06:55:45 -0800
Subject: [PATCH] modified source files in lte model to support cqi prediction

---
 src/lte/model/cqi-dl-env.cc          | 72 ++++++++++++++++++++++++++++
 src/lte/model/cqi-dl-env.h           | 36 ++++++++++++++
 src/lte/model/ff-mac-scheduler.cc    |  2 +
 src/lte/model/ff-mac-scheduler.h     |  2 +
 src/lte/model/rr-ff-mac-scheduler.cc | 13 ++++-
 src/lte/wscript                      |  4 +-
 6 files changed, 126 insertions(+), 3 deletions(-)
 create mode 100644 src/lte/model/cqi-dl-env.cc
 create mode 100644 src/lte/model/cqi-dl-env.h

diff --git a/src/lte/model/cqi-dl-env.cc b/src/lte/model/cqi-dl-env.cc
new file mode 100644
index 000000000..7d43780a5
--- /dev/null
+++ b/src/lte/model/cqi-dl-env.cc
@@ -0,0 +1,72 @@
+#include "cqi-dl-env.h"
+
+namespace ns3 {
+CQIDL::CQIDL (uint16_t id) : Ns3AIDL<CqiFeature, CqiPredicted, CQITarget> (id)
+{
+  SetCond (2, 0);
+}
+
+void
+CQIDL::SetWbCQI (uint8_t cqi)
+{
+  auto feature = FeatureSetterCond ();
+  feature->wbCqi = cqi;
+  SetCompleted ();
+}
+uint8_t
+CQIDL::GetWbCQI (void)
+{
+  auto pred = PredictedGetterCond ();
+  uint8_t ret = pred->new_wbCqi;
+  GetCompleted ();
+  return ret;
+}
+
+void
+CQIDL::SetSbCQI (SbMeasResult_s cqi, uint32_t nLayers)
+{
+  auto feature = FeatureSetterCond ();
+  uint32_t rbgNum = cqi.m_higherLayerSelected.size ();
+  feature->rbgNum = rbgNum;
+  feature->nLayers = nLayers;
+  for (uint32_t i = 0; i < rbgNum; ++i)
+    {
+      for (uint32_t j = 0; j < nLayers; ++j)
+        {
+          feature->sbCqi[i][j] = cqi.m_higherLayerSelected.at (i).m_sbCqi.at (j);
+        }
+    }
+  SetCompleted ();
+}
+void
+CQIDL::GetSbCQI (SbMeasResult_s &cqi)
+{
+  auto feature = FeatureGetterCond ();
+  auto pred = PredictedGetterCond ();
+  uint32_t rbgNum = feature->rbgNum;
+  uint32_t nLayers = feature->nLayers;
+
+  for (uint32_t i = 0; i < rbgNum; ++i)
+    {
+      for (uint32_t j = 0; j < nLayers; ++j)
+        {
+          cqi.m_higherLayerSelected.at (i).m_sbCqi.at (j) = pred->new_sbCqi[i][j];
+        }
+    }
+  GetCompleted ();
+}
+
+void CQIDL::SetTarget (uint8_t tar)
+{
+  auto target = TargetSetterCond ();
+  target->target = tar;
+  SetCompleted ();
+}
+uint8_t CQIDL::GetTarget (void)
+{
+  auto tar = TargetGetterCond ();
+  uint8_t ret = tar->target;
+  GetCompleted ();
+  return ret;
+}
+} // namespace ns3
diff --git a/src/lte/model/cqi-dl-env.h b/src/lte/model/cqi-dl-env.h
new file mode 100644
index 000000000..524821e7a
--- /dev/null
+++ b/src/lte/model/cqi-dl-env.h
@@ -0,0 +1,36 @@
+#pragma once
+#include "ns3/ns3-ai-dl.h"
+#include "ff-mac-common.h"
+
+namespace ns3 {
+#define MAX_RBG_NUM 32
+struct CqiFeature
+{
+  uint8_t wbCqi;
+  uint8_t rbgNum;
+  uint8_t nLayers;
+  uint8_t sbCqi[MAX_RBG_NUM][2];
+};
+struct CqiPredicted
+{
+  uint8_t new_wbCqi;
+  uint8_t new_sbCqi[MAX_RBG_NUM][2];
+};
+struct CQITarget
+{
+  uint8_t target;
+};
+class CQIDL : public Ns3AIDL<CqiFeature, CqiPredicted, CQITarget>
+{
+public:
+  CQIDL (void) = delete;
+  CQIDL (uint16_t id);
+  void SetWbCQI (uint8_t cqi);
+  uint8_t GetWbCQI (void);
+  void SetSbCQI (SbMeasResult_s cqi, uint32_t nLayers);
+  void GetSbCQI (SbMeasResult_s &cqi);
+  void SetTarget (uint8_t tar);
+  uint8_t GetTarget (void);
+};
+
+} // namespace ns3
diff --git a/src/lte/model/ff-mac-scheduler.cc b/src/lte/model/ff-mac-scheduler.cc
index bbf11840f..e010810f6 100644
--- a/src/lte/model/ff-mac-scheduler.cc
+++ b/src/lte/model/ff-mac-scheduler.cc
@@ -22,6 +22,7 @@
 #include "ff-mac-scheduler.h"
 #include <ns3/log.h>
 #include <ns3/enum.h>
+#include <ns3/simulator.h>
 
 
 namespace ns3 {
@@ -35,6 +36,7 @@ FfMacScheduler::FfMacScheduler ()
 : m_ulCqiFilter (SRS_UL_CQI)
 {
   NS_LOG_FUNCTION (this);
+  m_cqiDl = Create<CQIDL> (1357);
 }
 
 
diff --git a/src/lte/model/ff-mac-scheduler.h b/src/lte/model/ff-mac-scheduler.h
index 7f6d8ab62..bbe6902da 100644
--- a/src/lte/model/ff-mac-scheduler.h
+++ b/src/lte/model/ff-mac-scheduler.h
@@ -23,6 +23,7 @@
 #define FF_MAC_SCHEDULER_H
 
 #include <ns3/object.h>
+#include "cqi-dl-env.h"
 
 
 namespace ns3 {
@@ -130,6 +131,7 @@ public:
 protected:
     
   UlCqiFilter_t m_ulCqiFilter; ///< UL CQI filter
+  Ptr<CQIDL> m_cqiDl;
 
 };
 
diff --git a/src/lte/model/rr-ff-mac-scheduler.cc b/src/lte/model/rr-ff-mac-scheduler.cc
index cf53e123e..6c32031f6 100644
--- a/src/lte/model/rr-ff-mac-scheduler.cc
+++ b/src/lte/model/rr-ff-mac-scheduler.cc
@@ -1107,18 +1107,27 @@ RrFfMacScheduler::DoSchedDlCqiInfoReq (const struct FfMacSchedSapProvider::Sched
           NS_LOG_LOGIC ("wideband CQI " <<  (uint32_t) params.m_cqiList.at (i).m_wbCqi.at (0) << " reported");
           std::map <uint16_t,uint8_t>::iterator it;
           uint16_t rnti = params.m_cqiList.at (i).m_rnti;
+          uint8_t newCqi = params.m_cqiList.at (i).m_wbCqi.at (0);
+          NS_ASSERT_MSG (m_cqiDl != NULL, "DL env error");
+          if (rnti == 1)
+            {
+              uint8_t oldCqi = newCqi;
+              m_cqiDl->SetWbCQI (newCqi);
+              newCqi = m_cqiDl->GetWbCQI ();
+              std::cout<<"At: "<<Simulator::Now().GetSeconds()<<"s CQI: "<<(int)oldCqi<<"->"<<(int)newCqi<<std::endl;
+            }
           it = m_p10CqiRxed.find (rnti);
           if (it == m_p10CqiRxed.end ())
             {
               // create the new entry
-              m_p10CqiRxed.insert ( std::pair<uint16_t, uint8_t > (rnti, params.m_cqiList.at (i).m_wbCqi.at (0)) ); // only codeword 0 at this stage (SISO)
+              m_p10CqiRxed.insert ( std::pair<uint16_t, uint8_t > (rnti, newCqi) ); // only codeword 0 at this stage (SISO)
               // generate correspondent timer
               m_p10CqiTimers.insert ( std::pair<uint16_t, uint32_t > (rnti, m_cqiTimersThreshold));
             }
           else
             {
               // update the CQI value
-              (*it).second = params.m_cqiList.at (i).m_wbCqi.at (0);
+              (*it).second = newCqi;
               // update correspondent timer
               std::map <uint16_t,uint32_t>::iterator itTimers;
               itTimers = m_p10CqiTimers.find (rnti);
diff --git a/src/lte/wscript b/src/lte/wscript
index 19b88811b..7d370003d 100644
--- a/src/lte/wscript
+++ b/src/lte/wscript
@@ -2,11 +2,12 @@
 
 def build(bld):
 
-    lte_module_dependencies = ['core', 'network', 'spectrum', 'stats', 'buildings', 'virtual-net-device','point-to-point','applications','internet','csma']
+    lte_module_dependencies = ['core', 'network', 'spectrum', 'stats', 'buildings', 'virtual-net-device','point-to-point','applications','internet','csma','ns3-ai']
     if (bld.env['ENABLE_EMU']):
         lte_module_dependencies.append('fd-net-device')
     module = bld.create_ns3_module('lte', lte_module_dependencies)
     module.source = [
+        'model/cqi-dl-env.cc',
         'model/lte-common.cc',
         'model/lte-spectrum-phy.cc',
         'model/lte-spectrum-signal-parameters.cc',
@@ -201,6 +202,7 @@ def build(bld):
     headers = bld(features='ns3header')
     headers.module = 'lte'
     headers.source = [
+        'model/cqi-dl-env.h',
         'model/lte-common.h',
         'model/lte-spectrum-phy.h',
         'model/lte-spectrum-signal-parameters.h',
-- 
2.21.0 (Apple Git-122)

